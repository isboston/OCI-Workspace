name: Install Workspace Docker copy

on:
  schedule:
    - cron: '00 21 * * 6'
  push:
    branches:
      - 'master'
      - 'test'
  workflow_dispatch:

jobs:
  Install-Workspace-Docker:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Free Disk Space
        run: |
          sudo docker image prune --all --force

      - name: Configure Docker credentials
        run: |
          sudo mkdir -p /root/.docker
          echo '{
              "auths": {
                "https://index.docker.io/v1/": {
                  "auth": "${{ secrets.DOCKER_AUTH_KEY }}"
                }
              }
          }' | tee ~/.docker/config.json | sudo tee /root/.docker/config.json > /dev/null
          chmod 600 ~/.docker/config.json && sudo chmod 600 /root/.docker/config.json

      - name: Test Workspace Docker scripts
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Using official images (master branch)..."
            sudo bash -x install.sh -skiphc true -ims false </dev/null || exit $?
          else
            echo "Using 4testing images (non-master branch)..."
            sudo bash -x install.sh \
              -skiphc true \
              -ims false \
              --controlpanelimage onlyoffice/4testing-controlpanel \
              --controlpanelversion 3.5.4.541 \
              --documentimage onlyoffice/4testing-documentserver \
              --documentversion 8.3.1.19 \
              </dev/null || exit $?
          fi
          echo -n "Waiting for all containers to start..."
          timeout 300 bash -c 'while docker ps | grep -q "starting"; do sleep 5; done' && echo "OK" || echo "container_status=timeout" >> $GITHUB_ENV
          

      # - name: Test Workspace Docker scripts
      #   run: |
      #     if [ "${{ github.ref }}" = "refs/heads/master" ]; then
      #       echo "Using official images (master branch)..."
      #       sudo bash -x install.sh -skiphc true -ims false </dev/null || exit $?
      #     else
      #       echo "Using 4testing images (non-master branch)..."
      #       sudo bash -x install.sh \
      #         -skiphc true \
      #         -ims false \
      #         --communityimage onlyoffice/4testing-communityserver \
      #         --communityversion 12.7.1.1953 \
      #         --controlpanelimage onlyoffice/4testing-controlpanel \
      #         --controlpanelversion 3.5.4.541 \
      #         --documentimage onlyoffice/4testing-documentserver \
      #         --documentversion 8.3.1.19 \
      #         </dev/null || exit $?
      #     fi
      #     echo -n "Waiting for all containers to start..."
      #     timeout 300 bash -c 'while docker ps | grep -q "starting"; do sleep 5; done' && echo "OK" || echo "container_status=timeout" >> $GITHUB_ENV

      - name: Check container status
        run: |
          error=0
          while read container; do
            status=$(docker inspect --format="{{.State.Status}}" "$container")
            color=$([ "$status" == "running" ] && echo "\033[0;32m" || echo "\033[0;31m")
            printf "%-50s ${color}%s\033[0m\n" "$container" "$status"
            if [ "$status" != "running" ]; then
              echo "Container $container is not running!"
              error=1
            fi
          done < <(docker ps --all --format "{{.Names}}")
          
          if [ $error -eq 1 ]; then
            echo "Timeout. Some containers failed."
            exit 1
          fi

      - name: Print logs for crashed container
        if: always()
        run: |
          echo "Collecting logs for containers not running:"
          docker ps --all --format "{{.Names}}" | while read container; do
            if [ "$(docker inspect --format="{{.State.Status}}" $container)" != "running" ]; then
              echo "Logs for container $container:"
              docker logs --tail 30 $container | sed "s/^/\t/"
            fi
          done

      - name: Fail if containers not running
        if: ${{ env.container_status == 'timeout' }}
        run: |
          echo "Timeout. Some containers failed."
          exit 1


