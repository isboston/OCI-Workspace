name: Install Workspace Docker copy

on:
  schedule:
    - cron: '00 21 * * 6'
  push:
    branches:
      - 'master'
      - 'test'
  workflow_dispatch:

jobs:
  Install-Workspace-Docker:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Free Disk Space
        run: |
          sudo docker image prune --all --force

      - name: Decode and Login
        run: |
          set +x
          DECODED=$(echo "${{ secrets.DOCKER_AUTH_KEY }}" | base64 -d)
          USERNAME=$(echo "$DECODED" | cut -d':' -f1)
          PASSWORD=$(echo "$DECODED" | cut -d':' -f2-)
          echo "::add-mask::$USERNAME"
          echo "::add-mask::$PASSWORD"
          echo "$PASSWORD" | docker login --username "$USERNAME" --password-stdin

      - name: Test Workspace Docker scripts
        env:
          USERNAME: ${{ steps.decode.outputs.username }}
          PASSWORD: ${{ steps.decode.outputs.password }}
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Using official images (master branch)..."
            sudo bash install.sh -skiphc true -ims false </dev/null || exit $?
          else
            echo "Using 4testing images (non-master branch)..."
            sudo bash -x install.sh \
              -skiphc true \
              -ims false \
              --username "$USERNAME" \
              --password "$PASSWORD" \
              --communityimage onlyoffice/4testing-communityserver \
              --communityversion 12.7.1.1953 \
              --controlpanelimage onlyoffice/4testing-controlpanel \
              --documentimage onlyoffice/4testing-documentserver \
              </dev/null || exit $?
          fi

          echo -n "Waiting for all containers to start..."
          timeout 300 bash -c 'while docker ps | grep -q "starting"; do sleep 5; done' && echo "OK" || echo "container_status=timeout" >> $GITHUB_ENV

      - name: Check container status
        run: |
          error=0
          while read container; do
            status=$(docker inspect --format="{{.State.Status}}" "$container")
            color=$([ "$status" == "running" ] && echo "\033[0;32m" || echo "\033[0;31m")
            printf "%-50s ${color}%s\033[0m\n" "$container" "$status"
            if [ "$status" != "running" ]; then
              echo "Container $container is not running!"
              error=1
            fi
          done < <(docker ps --all --format "{{.Names}}")
          
          if [ $error -eq 1 ]; then
            echo "Timeout. Some containers failed."
            exit 1
          fi

      - name: Print logs for crashed container
        if: always()
        run: |
          echo "Collecting logs for containers not running:"
          docker ps --all --format "{{.Names}}" | while read container; do
            if [ "$(docker inspect --format="{{.State.Status}}" $container)" != "running" ]; then
              echo "Logs for container $container:"
              docker logs --tail 30 $container | sed "s/^/\t/"
            fi
          done

      - name: Fail if containers not running
        if: ${{ env.container_status == 'timeout' }}
        run: |
          echo "Timeout. Some containers failed."
          exit 1

