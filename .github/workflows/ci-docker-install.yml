name: Install Workspace Docker

on:
  push:
    branches:
      - 'master'
  workflow_dispatch:

jobs:
  Install-Workspace-Docker:
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Free Disk Space
        run: |
          sudo docker image prune --all --force

      - name: Configure Docker credentials
        run: |
          rm -f ~/.docker/config.json
          mkdir -p ~/.docker
          echo '{
              "auths": {
                  "https://index.docker.io/v1/": {
                      "auth": "${{ secrets.DOCKER_AUTH_KEY }}"
                  }
              }
          }' > ~/.docker/config.json
          chmod 600 ~/.docker/config.json

      - name: Get latest version for Community Server
        id: community
        run: |
          LATEST=$(curl -s "https://hub.docker.com/v2/repositories/onlyoffice/4testing-communityserver/tags/" \
            | jq -r '.results[].name' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n \
            | tail -n1)
          echo "LATEST_COMMUNITY=$LATEST" >> $GITHUB_ENV

      - name: Get latest version for Control Panel
        id: controlpanel
        run: |
          LATEST=$(curl -s "https://hub.docker.com/v2/repositories/onlyoffice/4testing-controlpanel/tags/" \
            | jq -r '.results[].name' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n \
            | tail -n1)
          echo "LATEST_CONTROLPANEL=$LATEST" >> $GITHUB_ENV

      - name: Get latest version for Document Server
        id: documentserver
        run: |
          LATEST=$(curl -s "https://hub.docker.com/v2/repositories/onlyoffice/4testing-documentserver/tags/" \
            | jq -r '.results[].name' \
            | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -t. -k1,1n -k2,2n -k3,3n -k4,4n \
            | tail -n1)
          echo "LATEST_DOCUMENT=$LATEST" >> $GITHUB_ENV

      - name: Test Workspace Docker scripts
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "Using official images (master branch)..."
            sudo bash -x install.sh -skiphc true -ims false </dev/null || exit $?
          else
            echo "Using 4testing images (non-master branch)..."
            echo "Community version: $LATEST_COMMUNITY"
            echo "ControlPanel version: $LATEST_CONTROLPANEL"
            echo "Document version: $LATEST_DOCUMENT"

            sudo bash -x install.sh \
              -skiphc true \
              -ims false \
              --communityimage onlyoffice/4testing-communityserver \
              --communityversion $LATEST_COMMUNITY \
              --controlpanelimage onlyoffice/4testing-controlpanel \
              --controlpanelversion $LATEST_CONTROLPANEL \
              --documentimage onlyoffice/4testing-documentserver \
              --documentversion $LATEST_DOCUMENT \
              </dev/null || exit $?
          fi

      - name: Waiting for containers
        run: |
          echo -n "Waiting for all containers to start..."
          timeout 300 bash -c 'while docker ps | grep -q "starting"; do sleep 5; done' && echo "OK" || echo "container_status=timeout" >> $GITHUB_ENV

      - name: Check container status
        run: |
          docker ps --all --format "{{.Names}}" | while read container; do
            status=$(docker inspect --format="{{.State.Status}}" $container)
            color=$([ "$status" == "running" ] && echo "\033[0;32m" || echo "\033[0;31m")
            printf "%-50s ${color}%s\033[0m\n" "$container" "$status"
            if [ "$status" != "running" ]; then
              echo "Container $container is not running!" >> $GITHUB_ENV
              exit 1
            fi
          done

      - name: Print logs for crashed container
        run: |
          docker ps --all --format "{{.Names}}" | while read container; do
            if [ "$(docker inspect --format="{{.State.Status}}" $container)" != "running" ]; then
              echo "Logs for container $container:"
              docker logs --tail 30 $container | sed "s/^/\t/g"
            fi
          done
          [[ "${{ env.container_status }}" == "timeout" ]] && echo "Timeout. Some containers failed." && exit 1 || echo "All containers are running."

